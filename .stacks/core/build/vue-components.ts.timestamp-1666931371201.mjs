// core/build/vue-components.ts
import { resolve as resolve7 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/pathe@0.3.9/node_modules/pathe/dist/index.mjs";
import { defineConfig as defineConfig3 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/vite@3.1.8/node_modules/vite/dist/node/index.js";

// ../config/library.ts
var libraryName = "calendar";
var organizationName = "@stacksjs";
var stackName = organizationName ? `${organizationName}/${libraryName}` : libraryName;
var componentsLibrary = {
  name: `${stackName}-vue`,
  description: "Your Vue component library description",
  keywords: ["component", "library", "vue", "vite", "typescript", "javascript"]
};
var webComponentsLibrary = {
  name: `${stackName}-elements`,
  description: "Your framework agnostic web component library description.",
  keywords: ["custom-elements", "web-components", "library", "framework-agnostic", "typescript", "javascript"]
};
var functionsLibrary = {
  name: `${stackName}-fx`,
  description: "Your function library description.",
  keywords: ["functions", "composables", "library", "typescript", "javascript"],
  shouldBuildIife: false,
  shouldGenerateSourcemap: false
};

// core/stacks.ts
import { resolve as resolve3 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/pathe@0.3.9/node_modules/pathe/dist/index.mjs";
import AutoImport from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/unplugin-auto-import@0.11.3_2vkcz272ljulahra7re3ceqcry/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/unplugin-vue-components@0.22.9_rollup@3.2.3+vue@3.2.41/node_modules/unplugin-vue-components/dist/vite.mjs";
import Vue from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/@vitejs+plugin-vue@3.1.2_vite@3.1.8+vue@3.2.41/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import Unocss from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/unocss@0.45.30_rollup@3.2.3+vite@3.1.8/node_modules/unocss/dist/vite.mjs";
import Inspect from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/vite-plugin-inspect@0.7.5_vite@3.1.8/node_modules/vite-plugin-inspect/dist/index.mjs";

// core/utils/fs.ts
import { fileURLToPath } from "node:url";
import { dirname, join, resolve } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/pathe@0.3.9/node_modules/pathe/dist/index.mjs";
import detectIndent from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/detect-indent@7.0.1/node_modules/detect-indent/index.js";
import { detectNewline } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/detect-newline@4.0.0/node_modules/detect-newline/index.js";
var __vite_injected_original_dirname = "/Users/glenn/Documents/Projects/calendar/.stacks/core/utils";
var __vite_injected_original_import_meta_url = "file:///Users/glenn/Documents/Projects/calendar/.stacks/core/utils/fs.ts";
var _dirname = typeof __vite_injected_original_dirname !== "undefined" ? __vite_injected_original_dirname : dirname(fileURLToPath(__vite_injected_original_import_meta_url));

// core/utils/generate.ts
import consola from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/consola@2.15.3/node_modules/consola/dist/consola.js";
import { resolve as resolve2 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/pathe@0.3.9/node_modules/pathe/dist/index.mjs";
import fg from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/index.js";
import fs from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/fs-extra@10.1.0/node_modules/fs-extra/lib/index.js";

// core/utils/helpers.ts
import ezSpawn from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/@jsdevtools+ez-spawn@3.0.4/node_modules/@jsdevtools/ez-spawn/lib/index.js";

// core/utils/string.ts
import {
  camelCase,
  capitalCase,
  constantCase,
  dotCase,
  headerCase,
  noCase,
  paramCase,
  paramCase as paramCase2,
  pascalCase,
  pathCase,
  sentenceCase,
  snakeCase
} from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/change-case@4.1.2/node_modules/change-case/dist/index.js";

// core/stacks.ts
var inspect = Inspect();
var components = Components({
  dirs: [resolve3(_dirname, "../../../components")],
  extensions: ["vue"],
  dts: "../../components.d.ts"
});
var autoImports = AutoImport({
  imports: [
    "vue",
    "@vueuse/core",
    "@vueuse/math",
    "vitest",
    { "collect.js": ["collect"] },
    { "@vueuse/shared": ["isClient", "isDef", "isBoolean", "isFunction", "isNumber", "isString", "isObject", "isWindow", "now", "timestamp", "clamp", "noop", "rand", "isIOS", "hasOwn"] }
  ],
  dirs: [
    resolve3(_dirname, "../utils"),
    resolve3(_dirname, "../security"),
    resolve3(_dirname, "../../../functions"),
    resolve3(_dirname, "../../../components"),
    resolve3(_dirname, "../../../config")
  ],
  dts: resolve3(_dirname, "../../auto-imports.d.ts"),
  vueTemplate: true,
  eslintrc: {
    enabled: true,
    filepath: resolve3(_dirname, "../../.eslintrc-auto-import.json")
  }
});
function atomicCssEngine(isWebComponent2 = false) {
  return Unocss({
    configFile: resolve3(_dirname, "../unocss.ts"),
    mode: isWebComponent2 ? "shadow-dom" : "vue-scoped"
  });
}
function uiEngine(isWebComponent2 = false) {
  if (isWebComponent2) {
    return Vue({
      template: {
        compilerOptions: {
          isCustomElement: () => true
        }
      }
    });
  }
  return Vue();
}

// core/build/web-components.ts
import { resolve as resolve5 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/pathe@0.3.9/node_modules/pathe/dist/index.mjs";
import { defineConfig } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/vite@3.1.8/node_modules/vite/dist/node/index.js";

// core/alias.ts
import { resolve as resolve4 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/pathe@0.3.9/node_modules/pathe/dist/index.mjs";
var r = (p) => resolve4(_dirname, p);
var alias = {
  "~/": r("../../.."),
  "stacks": r("../index.ts"),
  "stacks/*": r("../../*"),
  "functions/*": r("../../../functions/*"),
  "components/*": r("../../../components/*"),
  "config": r("./config.ts")
};
var alias_default = alias;

// core/build/web-components.ts
var isWebComponent = true;
var config = {
  root: resolve5(_dirname, "../../../components"),
  envDir: resolve5(_dirname, "../../../"),
  envPrefix: "APP_",
  server: {
    port: 3333,
    open: true
  },
  resolve: {
    alias: alias_default
  },
  plugins: [
    inspect,
    uiEngine(isWebComponent),
    atomicCssEngine(isWebComponent),
    autoImports,
    components
  ],
  build: webComponentsBuildOptions()
};
function webComponentsBuildOptions() {
  return {
    outDir: resolve5(_dirname, "../../web-components/dist"),
    emptyOutDir: true,
    lib: {
      entry: resolve5(_dirname, "../build/entries/web-components.ts"),
      name: webComponentsLibrary.name,
      formats: ["cjs", "es"],
      fileName: (format) => {
        if (format === "es")
          return "index.mjs";
        if (format === "cjs")
          return "index.cjs";
        return "index.?.js";
      }
    }
  };
}
var web_components_default = defineConfig(({ command }) => {
  if (command === "serve")
    return config;
  return config;
});

// core/build/functions.ts
import { resolve as resolve6 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/pathe@0.3.9/node_modules/pathe/dist/index.mjs";
import { defineConfig as defineConfig2 } from "file:///Users/glenn/Documents/Projects/calendar/node_modules/.pnpm/vite@3.1.8/node_modules/vite/dist/node/index.js";
var config2 = {
  root: resolve6(_dirname, "../../../functions"),
  envDir: resolve6(_dirname, "../../../"),
  envPrefix: "APP_",
  resolve: {
    alias: alias_default
  },
  plugins: [
    autoImports
  ],
  build: functionsBuildOptions()
};
function functionsBuildOptions() {
  return {
    outDir: resolve6(_dirname, "../../functions/dist"),
    emptyOutDir: true,
    sourcemap: functionsLibrary.shouldGenerateSourcemap,
    lib: {
      entry: resolve6(_dirname, "../build/entries/functions.ts"),
      name: functionsLibrary.name,
      formats: functionsLibrary.shouldBuildIife ? ["cjs", "es", "iife"] : ["cjs", "es"],
      fileName: (format) => {
        if (format === "es")
          return "index.mjs";
        if (format === "cjs")
          return "index.cjs";
        if (format === "iife")
          return "index.iife.js";
        return "index.?.js";
      }
    }
  };
}
var functions_default = defineConfig2(({ command }) => {
  if (command === "serve")
    return config2;
  return config2;
});

// core/build/vue-components.ts
var config3 = {
  root: resolve7(_dirname, "../../../components"),
  envDir: resolve7(_dirname, "../../../"),
  envPrefix: "APP_",
  server: {
    port: 3333,
    open: true
  },
  resolve: {
    dedupe: ["vue"],
    alias: alias_default
  },
  optimizeDeps: {
    exclude: ["vue"]
  },
  plugins: [
    inspect,
    uiEngine(),
    atomicCssEngine(),
    autoImports,
    components
  ],
  build: componentsBuildOptions()
};
function componentsBuildOptions() {
  return {
    outDir: resolve7(_dirname, "../../vue-components/dist"),
    emptyOutDir: true,
    lib: {
      entry: resolve7(_dirname, "../build/entries/vue-components.ts"),
      name: componentsLibrary.name,
      formats: ["cjs", "es"],
      fileName: (format) => {
        if (format === "es")
          return "index.mjs";
        if (format === "cjs")
          return "index.cjs";
        return "index.?.js";
      }
    },
    rollupOptions: {
      external: ["vue"],
      output: {
        globals: {
          vue: "Vue"
        }
      }
    }
  };
}
var vue_components_default = defineConfig3(({ command }) => {
  if (command === "serve")
    return config3;
  return config3;
});
export {
  componentsBuildOptions,
  vue_components_default as default
};
//# sourceMappingURL=data:application/json;base64,
